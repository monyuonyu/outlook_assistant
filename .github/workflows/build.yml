# =============================================================================
# Outlook Assistant ビルド自動化ワークフロー
# 
# このワークフローは、タグ（v*）がプッシュされたときに自動的に実行され、
# Windows用の実行ファイルをNuitkaを使用してビルドします。
# =============================================================================

name: Build Outlook Assistant

# ワークフローのトリガー設定
on:
  push:
    tags:
      - 'v*' # タグがプッシュされたときにビルドを開始（例: v1.0.0, v2.1.1など）

jobs:
  # =============================================================================
  # ビルドジョブ：Windowsでのビルドを行います
  # =============================================================================
  build:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
    # リポジトリのチェックアウト
    - uses: actions/checkout@v4
      
    # Pythonのセットアップ
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # 使用するPythonのバージョンを指定
        
    # 依存パッケージのインストール
    - name: Install dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka # Nuitkaをインストール
        pip install ordered-set # Nuitkaの依存パッケージ
        pip install zstandard # 圧縮アルゴリズム

    # Nuitkaを使って実行ファイルをビルド
    - name: Build with Nuitka
      shell: pwsh
      run: |
        python -m nuitka --onefile --include-package=win32com --follow-imports outlook_assistant.py --output-filename=OutlookAssistant.exe

    # ビルドされた成果物をアップロード
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: OutlookAssistant-Windows.exe
        path: OutlookAssistant.exe

  # =============================================================================
  # リリース作成ジョブ：リリースページを作成し、アセットをアップロードします
  # =============================================================================
  create_release:
    name: Create Release
    needs: build # ビルドジョブが完了したら実行
    runs-on: ubuntu-latest
    permissions:
      contents: write # リリース作成に必要な権限
    steps:
      # リポジトリのチェックアウト（タグ情報を取得するため）
      - uses: actions/checkout@v4
      
      # Windows用の実行ファイルをダウンロード
      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: OutlookAssistant-Windows.exe
          path: ./assets/
      
      # 成果物の存在確認とデバッグ
      - name: List downloaded artifacts
        shell: bash
        run: |
          mkdir -p ./assets/
          echo "ダウンロードされた成果物:"
          find ./assets -type f | sort
          echo "ファイル詳細:"
          ls -la ./assets/
      
      # GitHubリリースを作成（自動リリースノート付き）
      - name: Create Release with Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Outlook Assistant ${{ github.ref_name }}
          draft: true # 下書きとして作成（手動で公開する必要あり）
          prerelease: false # 正式リリースとしてマーク
          generate_release_notes: true # GitHub Actions が自動でリリースノートを生成
          body: |
            # Outlook Assistant ${{ github.ref_name }} リリース
            
            このリリースには、Windows用のビルド済み実行ファイルが含まれています。
            
            ## ダウンロード方法
            - `OutlookAssistant-Windows.exe` をダウンロードして実行してください
            
            ## 使用方法
            - 初回実行時は、AnthropicのAPI Keyを設定する必要があります
            - プログラムはコマンドラインオプションを受け付けます（詳細はREADME.mdを参照）
            
            ## 自動生成されたリリースノート
          files: |
            ./assets/OutlookAssistant-Windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # リリース URL を出力
      - name: Output Release URL
        shell: bash
        run: |
          echo "リリースが作成されました: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
